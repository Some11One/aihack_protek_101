import telebot
from bs4 import BeautifulSoup
from telebot import types
import pandas as pd
import numpy as np
import requests

from fuzzywuzzy import process
from fuzzywuzzy import fuzz


def export_to_csv():
    global settings_global, weights
    pd.DataFrame([(str(settings_global.get('cluster_numbers')), ';'.join([str(x) for x in weights]))],
                 columns=['num_clust', 'clust_weights']).to_excel('data/settings.xlsx')


def make_text(results, show_first_line = True):
    if show_first_line:
        text = "–ù–∞–∏–ª—É—á—à–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞):\n"
    else:
        text = ""
    for index, row in results.iterrows():
        if not pd.isnull(row['name']):
            text += "<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:</b> " + str(row['name']) + "\n"
        if not pd.isnull(row['site']):
            text += "<b>–°–∞–π—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:</b> " + str(row['site']) + "\n"
        if not pd.isnull(row['place_fail_rel_size']):
            text += "<b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è:</b> " + "{0:.2f}".format(
                float(row['place_fail_rel_size']) * 100) + "% \n"
        if not pd.isnull(row['google_rating']):
            text += "<b>Google —Ä–µ–π—Ç–∏–Ω–≥:</b> " + (int(row['google_rating']) * 'üåü' + '\n')

        if not pd.isnull(row['severity']):
            text += "<b>–¢—è–∂–µ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è:</b> "
            if float(row['severity']) > 0.85:
                text += "—Ç—è–∂–µ–ª–∞—è \n"
            elif float(row['severity']) > 0.6:
                text += "—Å—Ä–µ–¥–Ω—è—è \n"
            else:
                text += "–ª–µ–≥–∫–∞—è \n"

        text += "====================  \n"
    return text


def make_text_man(results, expert):
    text = ""
    if results.shape[0] == 0:
        return ""
    for i, row in results.iterrows():
        for j, row_expert in expert.iterrows():

            if not pd.isnull(row['name']):
                text += "<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:</b> " + str(row['name']) + "\n"
            if not pd.isnull(row['site']):
                text += "<b>–°–∞–π—Ç:</b> " + str(row['site']) + "\n"
            if not pd.isnull(row['rating']):
                text += "<b>–†–µ–π—Ç–∏–Ω–≥:</b> " + str(np.round(row['rating'], 2) * 100) + "\n"
            if not pd.isnull(row_expert['–ù–∞—Ä—É—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ']):
                exp_sum = row_expert['–¢—è–∂–µ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ']
                text += "<b>–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π:</b> " + str(exp_sum) + "\n"
                text += "<b>–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è:</b> " + row_expert['–ù–∞—Ä—É—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ'] + "\n"
            if not pd.isnull(row['place_fail_rel_size']):
                text += "<b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è:</b> " + "{0:.2f}".format(
                    float(row['place_fail_rel_size']) * 100) + "%"
                if row['trend'] == 1:
                    text += ' ‚Üó'
                elif row['trend'] == -1:
                    text += ' ‚Üò'
                text += '\n'
            if not pd.isnull(row['place_total_fail']):
                text += "<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏:</b> " + str(int(row['place_total_fail'])) + '\n'
            if not pd.isnull(row['–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è']):
                text += "<b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π:</b> " + str(int(row['–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è'])) + ' –¥–Ω–µ–π\n'
            if not pd.isnull(row['google_rating']):
                text += "<b>Google —Ä–µ–π—Ç–∏–Ω–≥:</b> " + int(row['google_rating']) * 'üåü' + '\n'
            if not pd.isnull(row['link_numbers']):
                text += "<b>–¶–∏—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å:</b> " + str(int(row['link_numbers'])) + '\n'

            text += "====================  \n"

            break

    return text


token = ''
bot = telebot.TeleBot(token)
user_state = None
weights = []

settings_global = {
    "cluster_numbers": None
}

dict_medicines = pd.read_csv('data/gos_dict.csv', sep=';', encoding='cp1251', names=['place_id', 'place_name', 'name'], skiprows=1)
dict_medicines = dict_medicines[~pd.isnull(dict_medicines.place_id)]
dict_medicines.reset_index(inplace=True, drop=True)

expert = pd.read_csv('data/expert.csv', encoding='cp1251')

# dict_manufacturers = pd.read_csv('data/gos_dict_manuf.csv', sep=';', encoding='cp1251', names=['place_id', 'name'],
#                                  skiprows=1)
# dict_manufacturers = dict_manufacturers[~pd.isnull(dict_manufacturers.place_id)]
# dict_manufacturers.reset_index(inplace=True, drop=True)

results = pd.read_csv('results/result_pan.csv', sep=';', encoding='cp1251')


@bot.message_handler(commands=["menu"])
def menu(message):
    keyboard_menu = types.ReplyKeyboardMarkup(row_width=0.5, resize_keyboard=True)
    keyboard_menu.row('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–†–µ–π—Ç–∏–Ω–≥')
    keyboard_menu.row('–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é', '–ü–æ–∏—Å–∫ –ø–æ –ú–ù–ù')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=keyboard_menu)


@bot.message_handler(func=lambda message: message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def settings(m):
    keyboard_hider = types.ReplyKeyboardRemove()
    global user_state, weights
    weights = []
    user_state = 'settings'
    bot.send_message(m.chat.id, "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤ –æ—Ç–∑—ã–≤–æ–≤ (–æ—Ç 2 –¥–æ 5):",
                     reply_markup=keyboard_hider)


@bot.message_handler(func=lambda message: message.text == "–†–µ–π—Ç–∏–Ω–≥")
def rating(m):
    keyboard_hider = types.ReplyKeyboardRemove()
    global user_state
    user_state = 'print_rating'
    # bot.send_message(m.chat.id, "–¢—É—Ç –±—É–¥–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥!", reply_markup=keyboard_hider)
    result_df = results.sort_values(['rating'], ascending=True)[:5]
    bot.send_message(m.chat.id, make_text(result_df, False), parse_mode='html')
    user_state = None
    menu(m)


@bot.message_handler(commands=["start"])
def start(message):
    global user_state
    user_state = None
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –±–æ—Ç–µ –ü—Ä–æ—Ç–µ–∫–∞ —Ö–∞–∫–∞—Ç–æ–Ω–∞ AI.Hack –ú–æ—Å–∫–≤–∞! ")
    menu(message)


@bot.message_handler(func=lambda message: message.text == "–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é")
def search_man(m):
    keyboard_hider = types.ReplyKeyboardRemove()
    global user_state
    user_state = 'search_man'
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=keyboard_hider)


@bot.message_handler(func=lambda message: user_state == 'settings')
def settings_n_cluster(m):
    global user_state, settings_global

    if not m.text.isdigit():
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ–º, –ø–æ—ç—Ç–æ–º—É —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –∂–¥—ë–º –¥–∞–ª—å—à–µ
        bot.send_message(m.chat.id, "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
        return

    if int(m.text) < 2 or int(m.text) > 5:
        bot.send_message(m.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤. –í–≤–µ–¥–∏—Ç–µ –æ—Ç 2 –¥–æ 5.")
        return
    else:
        settings_global['cluster_numbers'] = int(m.text)
        user_state = 'settings_1'
        bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å–∞ –¥–ª—è " + str(
            m.text) + " –∫–ª–∞—Å—Å–æ–≤. –ö–ª–∞—Å—Å—ã —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å—Ç–µ–ø–µ–Ω–∏ —Ç—è–∂–µ—Å—Ç–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π. –í–µ—Å –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ (—Å –Ω–∞–∏–º–µ–Ω–µ–µ —Ç—è–∂–∫–∏–º–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏):")


@bot.message_handler(func=lambda message: message.text == "–ü–æ–∏—Å–∫ –ø–æ –ú–ù–ù")
def search_mnn(m):
    keyboard_hider = types.ReplyKeyboardRemove()
    global user_state
    user_state = 'search_mnn'
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ú–ù–ù:", reply_markup=keyboard_hider)


@bot.message_handler(func=lambda message: user_state == 'settings_1')
def settings_weights(m):
    global user_state, settings_global, weights

    if not m.text.isdigit():
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ–º, –ø–æ—ç—Ç–æ–º—É —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –∂–¥—ë–º –¥–∞–ª—å—à–µ
        bot.send_message(m.chat.id, "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
        return
    else:
        weights.append(int(m.text))
        if len(weights) < settings_global['cluster_numbers']:
            bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –¥–ª—è " + str(len(weights) + 1) + " –∫–ª–∞—Å—Å–∞:")
            return
        else:
            user_state = None
        bot.send_message(m.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.")
        export_to_csv()

        menu(m)


def get_rigla_request(keyword):
    return 'http://www.rigla.ru/search/?q=' + str(keyword.replace(' ', '+'))


def find_in_rigla(keyword):
    url = get_rigla_request(keyword)
    headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:45.0) Gecko/20100101 Firefox/45.0'
    }

    r = requests.get(url, headers=headers)

    soup = BeautifulSoup(r.text.encode('utf8'), "lxml")

    prices = []
    for price in soup.findAll('span', {'class': 'price'}):
        if price.text == "":
            break
        l = [np.round(float(s.replace(',', '.')), 1) for s in price.text.split() if s.isdigit()]
        if len(l) > 0:
            prices.append(l[0])
    if len(prices) == 0:
        return None
    if len(prices) == 1:
        return str(prices[0])
    elif len(prices) > 1:
        return str(min(prices)) + ' - ' + str(max(prices))


@bot.message_handler(func=lambda message: user_state == 'search_mnn')
def search_mnn(m):
    global dict_medicines
    search_result = pd.DataFrame(
        process.extract(m.text, dict_medicines.name, scorer=fuzz.token_sort_ratio, limit=10000))
    if len(search_result[search_result[1] > 75]) > 0:
        l = str(search_result.loc[0, 0])
        url = get_rigla_request(l)
        price = find_in_rigla(l)
        keyboard = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –Ω–∞ –†–∏–≥–ª–µ", url=url)
        keyboard.add(url_button)
        if price is None:
            bot.send_message(m.chat.id, "–ù–∞–π–¥–µ–Ω–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ: " + l
                             + '. –ù–∞–∏–ª—É—á—à–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞):', parse_mode='html',
                             reply_markup=keyboard)
        else:
            bot.send_message(m.chat.id, "–ù–∞–π–¥–µ–Ω–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ: " + l + ", —Ü–µ–Ω–∞: " + price + ' —Ä—É–±'
                             + '. –ù–∞–∏–ª—É—á—à–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞):', parse_mode='html',
                             reply_markup=keyboard)

        search_result = dict_medicines.iloc[search_result[search_result[1] > 75].set_index(2).index.values]
        result_df = results[results.place_id.isin(search_result.place_id)].sort_values(by='rating', ascending=True)[:10]
        bot.send_message(m.chat.id, make_text(result_df), parse_mode='html')

    else:
        bot.send_message(m.chat.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. \n <b>–ï—â–µ —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ</b>",
                         parse_mode='html')
    user_state = None
    menu(m)


@bot.message_handler(func=lambda message: user_state == 'search_man')
def search_man(m):
    global dict_medicines
    search_result = pd.DataFrame(
        process.extract(m.text, dict_medicines.place_name, scorer=fuzz.token_sort_ratio, limit=1))
    if len(search_result) > 0:
        bot.send_message(m.chat.id, "–ù–∞–π–¥–µ–Ω –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: " + str(search_result.loc[0, 0]), parse_mode='html')
        search_result = dict_medicines.iloc[search_result.loc[0, 2]]
        result_df = results[results.place_id == search_result.place_id]  # [:1]
        expert_df = expert[expert.place_id == search_result.place_id]  # [:1]
        t = make_text_man(result_df, expert_df)
        if t == "":
            bot.send_message(m.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode='html')
        else:
            bot.send_message(m.chat.id, t, parse_mode='html')

    else:
        bot.send_message(m.chat.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. \n <b>–ï—â–µ —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ</b>",
                         parse_mode='html')
    user_state = None
    menu(m)


bot.polling(none_stop=True)
